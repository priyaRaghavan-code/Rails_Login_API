From cd0953fb4700bbcbf629ecf5ab66615523d0ed6e Mon Sep 17 00:00:00 2001
From: Mohan Raja Gadikota <gadikotamohan@gmail.com>
Date: Tue, 31 Aug 2021 09:41:29 +0530
Subject: [PATCH] Code refactor

---
 Gemfile                                      |  1 +
 app/controllers/application_controller.rb    | 23 +++++----
 app/controllers/authentication_controller.rb | 24 ++++++---
 app/domains/sessions/authenticator.rb        | 52 ++++++++++++++++++++
 app/domains/sessions/token_encoder.rb        | 25 ++++++++++
 app/domains/sessions/token_verifier.rb       |  9 ++++
 app/domains/users/registration.rb            | 27 ++++++++++
 lib/tasks/callable.rb                        |  8 +++
 8 files changed, 153 insertions(+), 16 deletions(-)
 create mode 100644 app/domains/sessions/authenticator.rb
 create mode 100644 app/domains/sessions/token_encoder.rb
 create mode 100644 app/domains/sessions/token_verifier.rb
 create mode 100644 app/domains/users/registration.rb
 create mode 100644 lib/tasks/callable.rb

diff --git a/Gemfile b/Gemfile
index 4ba7fda..7a9e31d 100644
--- a/Gemfile
+++ b/Gemfile
@@ -51,3 +51,4 @@ group :test do
 end
 # Windows does not include zoneinfo files, so bundle the tzinfo-data gem
 gem 'tzinfo-data', platforms: [:mingw, :mswin, :x64_mingw, :jruby]
+gem 'actionable'
diff --git a/app/controllers/application_controller.rb b/app/controllers/application_controller.rb
index 16ce61d..0f31213 100644
--- a/app/controllers/application_controller.rb
+++ b/app/controllers/application_controller.rb
@@ -6,15 +6,20 @@ class ApplicationController < ActionController::API
 
   def authorize_request
     header = request.headers['Authorization']
-    header = header.split(' ').last if header
-    begin
-      @decoded = JsonWebToken.decode(header)
-      @current_user = User.find(@decoded[:user_id])
-    rescue ActiveRecord::RecordNotFound => e
-      render json: { errors: e.message }, status: :unauthorized
-    rescue JWT::DecodeError => e
-      render json: { errors: e.message }, status: :unauthorized
-    end
+    # header = header.split(' ').last if header
+    # begin
+    #   @decoded = JsonWebToken.decode(header)
+    #   @current_user = User.find(@decoded[:user_id])
+    # rescue ActiveRecord::RecordNotFound => e
+    #   render json: { errors: e.message }, status: :unauthorized
+    # rescue JWT::DecodeError => e
+    #   render json: { errors: e.message }, status: :unauthorized
+    # end
+    result = Sessions::TokenVerifier.run(
+      header: request.headers['Authorization'],
+      decoder: Sessions::TokenEncoder,
+    )
+    render json: { errors: result.message }, status: :unauthorized unless result.success?
   end
   
 end
diff --git a/app/controllers/authentication_controller.rb b/app/controllers/authentication_controller.rb
index c2d1aeb..438b9b0 100644
--- a/app/controllers/authentication_controller.rb
+++ b/app/controllers/authentication_controller.rb
@@ -4,15 +4,25 @@ class AuthenticationController < ApplicationController
   def login
     @user = User.find_by_email(params[:email])
     # byebug
-    if @user&.authenticate(params[:password])
-      token = JsonWebToken.encode(user_id: @user.id)
-      time = Time.now + 24.hours.to_i
-      render json: @user, status: :created
-      # render json: { token: token, exp: time.strftime("%m-%d-%Y %H:%M"),
-                    #  name: @user.name }, status: :ok
+    result = Sessions::Authenticator.run(
+      email: params[:email],
+      password: params[:password],
+      jwt_encoder: Sessions::NewTokenEncoder,
+    )
+    if result.success?
+      render json: result.fixtures['token']
     else
-      render json: { error: 'unauthorized' }, status: :unauthorized
+      render json: { error: result.message }, status: :unauthorized
     end
+    # if @user&.authenticate(params[:password])
+    #   token = JsonWebToken.encode(user_id: @user.id)
+    #   time = Time.now + 24.hours.to_i
+    #   render json: @user, status: :created
+    #   # render json: { token: token, exp: time.strftime("%m-%d-%Y %H:%M"),
+    #                 #  name: @user.name }, status: :ok
+    # else
+    #   render json: { error: 'unauthorized' }, status: :unauthorized
+    # end
   end
 
   private
diff --git a/app/domains/sessions/authenticator.rb b/app/domains/sessions/authenticator.rb
new file mode 100644
index 0000000..65b393c
--- /dev/null
+++ b/app/domains/sessions/authenticator.rb
@@ -0,0 +1,52 @@
+module Sessions
+  class Authenticator < Actionable::Action
+    # extend Callable
+    step :find_user
+    step :authenticate
+    step :generate_token
+
+    def initializer(
+      email:,
+      password:,
+      jwt_encoder: Sessions::TokenEncoder
+    )
+      @_email= email
+      @_password = password
+      @_jwt_encoder = @jwt_encoder
+      @token = nil
+    end
+
+    private
+    def find_user
+      @user = User.find_by email: @email
+      unless @user
+        fail!(
+          :find_user,
+          "Failed: No user found"
+        )
+      end
+    end
+
+    def authenticate
+      result = @user&.authenticate(params[:password])
+      unless result
+        fail!(
+          :authenticate,
+          "Failed: Unable to verify credentails"
+        )
+      end
+    end
+
+    def generate_token
+      @token = @jwt_encoder.encode(user_id: @user.id, { exp: Time.now+24.hours.to_i }) # this fails
+    end
+
+    def authenticate_1
+      # Business logic for authentication
+      @user = User.find_by email: @email # if @user is blank?
+      raise Exception.new("Failed: No user found")
+      @user&.authenticate(params[:password]) # if this fails
+      @jwt_encoder.encode(user_id: @user.id, { exp: Time.now+24.hours.to_i }) # this fails
+    end
+  end
+end
\ No newline at end of file
diff --git a/app/domains/sessions/token_encoder.rb b/app/domains/sessions/token_encoder.rb
new file mode 100644
index 0000000..004befe
--- /dev/null
+++ b/app/domains/sessions/token_encoder.rb
@@ -0,0 +1,25 @@
+module Sessions
+  class TokenEncoder
+    SECRET_KEY = Rails.application.secrets.secret_key_base.freeze
+    ALGORITHM_TYPE = 'HS256'.freeze
+    extend Callable
+
+    def call(
+      user_id:,
+      opts: {},
+    )
+      payload = opts.merge({ user_id: user_id})
+      JWT.encode(payload, SECRET_KEY, ALGORITHM_TYPE)
+    end
+
+    def self.encode(payload, exp = 24.hours.from_now)
+      payload[:exp] = exp.to_i
+      JWT.encode(payload, SECRET_KEY)
+    end
+
+    def self.decode(token)
+      decoded = JWT.decode(token, SECRET_KEY)[0]
+      HashWithIndifferentAccess.new decoded
+    end
+  end
+end
diff --git a/app/domains/sessions/token_verifier.rb b/app/domains/sessions/token_verifier.rb
new file mode 100644
index 0000000..d9459c5
--- /dev/null
+++ b/app/domains/sessions/token_verifier.rb
@@ -0,0 +1,9 @@
+module Sessions
+  class TokenVerifier < Actionable::Action
+    # Steps
+    # initialize
+    step :parse_header
+    step :parse_token
+    step :verify # not sure if token is expired or blacklisted
+  end
+end
diff --git a/app/domains/users/registration.rb b/app/domains/users/registration.rb
new file mode 100644
index 0000000..f0e9c07
--- /dev/null
+++ b/app/domains/users/registration.rb
@@ -0,0 +1,27 @@
+module Users
+  class Registration < Actionable::Action
+    step :validate
+    step :save
+    step :create_token
+
+    def initialize(
+      params: {},
+      encoder: Sessions::TokenEncoder
+    )
+      @params = params
+      @encoder = encoder
+      @user = nil
+    end
+
+    def validate
+      @user = User.new(@params)
+      # 
+    end
+
+    def save
+    end
+
+    def create_token
+    end
+  end
+end
\ No newline at end of file
diff --git a/lib/tasks/callable.rb b/lib/tasks/callable.rb
new file mode 100644
index 0000000..51e3583
--- /dev/null
+++ b/lib/tasks/callable.rb
@@ -0,0 +1,8 @@
+# frozen_string_literal: true
+
+# Simple mixin creator for allowing class.call
+module Callable
+  def call(*args)
+    self.new.call(*args)
+  end
+end
-- 
2.30.1 (Apple Git-130)

